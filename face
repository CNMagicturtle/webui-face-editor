from operator import attrgetter
from typing import List

import cv2
import gradio as gr
import modules.scripts as scripts
import modules.shared as shared
import numpy as np
import torch
from facexlib.detection import RetinaFace, init_detection_model
from facexlib.parsing import BiSeNet, init_parsing_model
from facexlib.utils.misc import img2tensor
from modules.processing import (Processed, StableDiffusionProcessing,
                                StableDiffusionProcessingImg2Img,
                                process_images)
from PIL import Image
from torchvision.transforms.functional import normalize


class Face:
    def __init__(self, entire_image: np.ndarray, face_box: np.ndarray, face_margin: float):
        left, top, right, bottom = self.__to_square(face_box)

        self.left, self.top, self.right, self.bottom = self.__ensure_margin(
            left, top, right, bottom, entire_image, face_margin)

        self.width = self.right - self.left
        self.height = self.bottom - self.top

        self.image = self.__crop_face_image(entire_image)

    def __crop_face_image(self, entire_image: np.ndarray):
        cropped = entire_image[self.top: self.bottom, self.left: self.right, :]
        return Image.fromarray(
            cv2.resize(cropped, dsize=(512, 512)))

    def __to_square(self, face_box: np.ndarray):
        left, top, right, bottom, *_ = list(map(int, face_box))

        width = right - left
        height = bottom - top

        if width % 2 == 1:
            right = right + 1
            width = width + 1
        if height % 2 == 1:
            bottom = bottom + 1
            height = height + 1

        diff = int(abs(width - height) / 2)
        if width > height:
            top = top - diff
            bottom = bottom + diff
        else:
            left = left - diff
            right = right + diff

        return left, top, right, bottom

    def __ensure_margin(self, left: int, top: int, right: int, bottom: int, entire_image: np.ndarray, margin: float):
        entire_height, entire_width = entire_image.shape[:2]

        side_length = right - left
        margin = min(min(entire_height, entire_width) /
                     side_length, margin)
        diff = int((side_length * margin - side_length) / 2)

        top = top - diff
        bottom = bottom + diff
        left = left - diff
        right = right + diff

        if top < 0:
            bottom = bottom - top
            top = 0
        if left < 0:
            right = right - left
            left = 0

        if bottom > entire_height:
            top = top - (bottom - entire_height)
            bottom = entire_height
        if right > entire_width:
            left = left - (right - entire_width)
            right = entire_width

        return left, top, right, bottom



class BatchScript(scripts.Script):
    def title(self):
        return "Face Editor (Batch)"

    def show(self, is_img2img):
        return True

    def ui(self, is_img2img):
        max_face_count = gr.Slider(
            minimum=1,
            maximum=20,
            step=1,
            value=20,
            label="Maximum number of faces to detect",
        )
        confidence = gr.Slider(
            minimum=0.7,
            maximum=1.0,
            step=0.01,
            value=0.97,
            label="Face detection confidence",
        )
        face_margin = gr.Slider(
            minimum=1.0, maximum=2.0, step=0.1, value=1.6, label="Face margin"
        )
        prompt_for_face = gr.Textbox(
            show_label=False,
            placeholder="Prompt for face",
            label="Prompt for face",
            lines=2,
        )
        strength1 = gr.Slider(
            minimum=0.1,
            maximum=0.8,
            step=0.05,
            value=0.4,
            label="Denoising strength for face images",
        )
        mask_size = gr.Slider(label="Mask size", minimum=0,
                              maximum=64, step=1, value=0)
        mask_blur = gr.Slider(label="Mask blur", minimum=0,
                              maximum=64, step=1, value=0)
        strength2 = gr.Slider(
            minimum=0.0,
            maximum=1.0,
            step=0.05,
            value=0.15,
            label="Denoising strength for the entire image",
        )

        save_original_image = gr.Checkbox(
            label="Save original image",
            value=False,
            visible=not is_img2img)

        input_images = gr.inputs.ImageList(
            type="file", label="Input Images (multiple)", extensions=["jpg", "jpeg", "png"]
        )

        return [
            input_images,
            face_margin,
            confidence,
            strength1,
            strength2,
            max_face_count,
            mask_size,
            mask_blur,
            prompt_for_face,
            save_original_image,
        ]

    def run_batch(
        self,
        input_images: List[Image.Image],
        o: StableDiffusionProcessing,
        face_margin: float,
        confidence: float,
        strength1: float,
        strength2: float,
        max_face_count: int,
        mask_size: int,
        mask_blur: int,
        prompt_for_face: str,
        save_original_image: bool,
    ):
        processed_images = []
        for image in input_images:
            o.init_images = [image
            o.init_faces()
            o.face_margin = face_margin
            o.confidence = confidence
            o.denoising_strength1 = strength1
            o.denoising_strength2 = strength2
            o.max_face_count = max_face_count
            o.mask_size = mask_size
            o.mask_blur = mask_blur
            o.prompt_for_face = prompt_for_face

            processed_img, _ = process_images(o)
            processed_images.append(processed_img)

            if save_original_image:
                original_name = shared.random_name()
                image.save(f"output/{original_name}.png", format="PNG")

        for img, input_img in zip(processed_images, input_images):
            img_name = shared.random_name()
            img.save(f"output/{img_name}.png", format="PNG")

        return f"{len(input_images)}张图片已经处理完毕。"


def main():
    o = StableDiffusionProcessingImg2Img()
    s = BatchScript(o)
    s.setup()

    ui_elements = s.ui(True)
    iface = gr.Interface(fn=s.run_batch, inputs=ui_elements[:-1], outputs="text")
    iface.launch()


if __name__ == "__main__":
    main()
